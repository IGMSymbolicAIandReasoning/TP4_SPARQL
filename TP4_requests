1.  Count the number of vaccined and not-vaccined persons
SELECT (COUNT(*) as ?Triples) WHERE {?s <http://extension.group1.fr/onto#vaccine> ?o}
-> Triples = 5789 (approximately)



2.  For  the  vaccined  persons,  retrieve  the  number  of  individuals  in  each  vaccine  group  where  a group corresponds to the set of persons vaccined with the same drug (right now, you should have 5 groupssince we have 5 vaccines)

Aproximative repartition for ("Pfizer", "Moderna","AstraZeneca", "SpoutnikV", "CanSinoBi") has been defined as follows (20%, 20%, 30%, 10%, 20%)

Pfizer : Select (count(*) as ?triles) where {?x <http://extension.group1.fr/onto#vaccine> <http://extension.group1.fr/onto#Pfizer>} -> 1208
 
Moderna : Select (count(*) as ?triles) where {?x <http://extension.group1.fr/onto#vaccine> <http://extension.group1.fr/onto#Moderna>} -> 1195

AstraZeneca : Select (count(*) as ?triles) where {?x <http://extension.group1.fr/onto#vaccine> <http://extension.group1.fr/onto#AstraZeneca>} -> 1681

SpoutnikV : Select (count(*) as ?triles) where {?x <http://extension.group1.fr/onto#vaccine> <http://extension.group1.fr/onto#SpoutnikV>} -> 570

CanSinoBi : Select (count(*) as ?triles) where {?x <http://extension.group1.fr/onto#vaccine> <http://extension.group1.fr/onto#CanSinoBi>} -> 1135




3. Write a query that retrieves AssociateProfessors that work for an organization that is a Department and who teach a course.  Using the “Explain” advanced features in the Query tab, interpret the provided query plan.

nb = use str(?s) to regex on subject

Select Distinct ?s where {
  ?s <http://swat.cse.lehigh.edu/onto/univ-bench.owl#teacherOf> ?o.
  filter contains(str(?s), "Department").
  filter contains(str(?s), "AssociateProfessor")
}
  

Query Plan Obtained : 

com.bigdata.bop.rdf.join.ChunkedMaterializationOp[11](ProjectionOp[10])[ ChunkedMaterializationOp.vars=[s], IPredicate.relationName=[lubm1.lex], IPredicate.timestamp=1612220720796, ChunkedMaterializationOp.materializeAll=true, PipelineOp.sharedState=true, BOp.bopId=11, BOp.namespace=lubm1, QueryEngine.queryId=33f32138-d52d-4ede-b296-811baa9f5a17, QueryEngine.chunkHandler=com.bigdata.bop.engine.ManagedHeapStandloneChunkHandler@14c12db7]
  com.bigdata.bop.solutions.ProjectionOp[10](JVMDistinctBindingSetsOp[9])[ BOp.bopId=10, BOp.evaluationContext=CONTROLLER, PipelineOp.sharedState=true, JoinAnnotations.select=[s]]
    com.bigdata.bop.solutions.JVMDistinctBindingSetsOp[9](ConditionalRoutingOp[6])[ BOp.bopId=9, HashJoinAnnotations.joinVars=[s], BOp.evaluationContext=CONTROLLER, PipelineOp.sharedState=true]
      com.bigdata.bop.bset.ConditionalRoutingOp[6](ChunkedMaterializationOp[8])[ BOp.bopId=6, ConditionalRoutingOp.condition=com.bigdata.rdf.internal.constraints.SPARQLConstraint(com.bigdata.rdf.internal.constraints.StrcontainsBOp(com.bigdata.rdf.internal.constraints.StrBOp(s)[ IVValueExpression.namespace=lubm1.lex, IVValueExpression.timestamp=1612220720796],TermId(0L)[AssociateProfessor]))]
        com.bigdata.bop.rdf.join.ChunkedMaterializationOp[8](ConditionalRoutingOp[7])[ ChunkedMaterializationOp.vars=[s], IPredicate.relationName=[lubm1.lex], IPredicate.timestamp=1612220720796, ChunkedMaterializationOp.materializeAll=false, PipelineOp.sharedState=true, PipelineOp.reorderSolutions=true, PipelineOp.maxParallel=5, BOp.bopId=8]
          com.bigdata.bop.bset.ConditionalRoutingOp[7](ConditionalRoutingOp[3])[ BOp.bopId=7, ConditionalRoutingOp.condition=com.bigdata.rdf.internal.constraints.SPARQLConstraint(com.bigdata.rdf.internal.constraints.NeedsMaterializationBOp(com.bigdata.rdf.internal.constraints.StrcontainsBOp(com.bigdata.rdf.internal.constraints.StrBOp(s)[ IVValueExpression.namespace=lubm1.lex, IVValueExpression.timestamp=1612220720796],TermId(0L)[AssociateProfessor]))), PipelineOp.altSinkRef=6]
            com.bigdata.bop.bset.ConditionalRoutingOp[3](ChunkedMaterializationOp[5])[ BOp.bopId=3, ConditionalRoutingOp.condition=com.bigdata.rdf.internal.constraints.SPARQLConstraint(com.bigdata.rdf.internal.constraints.StrcontainsBOp(com.bigdata.rdf.internal.constraints.StrBOp(s)[ IVValueExpression.namespace=lubm1.lex, IVValueExpression.timestamp=1612220720796],TermId(0L)[Department]))]
              com.bigdata.bop.rdf.join.ChunkedMaterializationOp[5](ConditionalRoutingOp[4])[ ChunkedMaterializationOp.vars=[s], IPredicate.relationName=[lubm1.lex], IPredicate.timestamp=1612220720796, ChunkedMaterializationOp.materializeAll=false, PipelineOp.sharedState=true, PipelineOp.reorderSolutions=true, PipelineOp.maxParallel=5, BOp.bopId=5]
                com.bigdata.bop.bset.ConditionalRoutingOp[4](PipelineJoin[2])[ BOp.bopId=4, ConditionalRoutingOp.condition=com.bigdata.rdf.internal.constraints.SPARQLConstraint(com.bigdata.rdf.internal.constraints.NeedsMaterializationBOp(com.bigdata.rdf.internal.constraints.StrcontainsBOp(com.bigdata.rdf.internal.constraints.StrBOp(s)[ IVValueExpression.namespace=lubm1.lex, IVValueExpression.timestamp=1612220720796],TermId(0L)[Department]))), PipelineOp.altSinkRef=3]
                  com.bigdata.bop.join.PipelineJoin[2]()[ BOp.bopId=2, JoinAnnotations.constraints=[com.bigdata.rdf.internal.constraints.TryBeforeMaterializationConstraint(SPARQLConstraint{condi
